INC	0	4	(1)	alloc vars: 0 - number, 1 - count, 2 - total, 3 - average
JMP	0	12	(2)	jump to main
LDV	1	1	(3)	load count onto tos - scope level difference 1, offset 1
LCI	0	1	(4)	load constant int 1 onto tos
OPR	0	3	(5)	count + 1
STO	1	1	(6)	count := count + 1
LDV	1	2	(7)	load total onto tos - scope level difference 1, offset 2
LDV	0	0	(8)	load in parameter n onto tos
OPR	0	3	(9)	total + n
STO	1	2	(10)	total := total + n
OPR	0	0	(11)	return
LCI	0	0	(12)	load constant int 0 onto tos
STO	0	1	(13)	count := 0
LCI	0	0	(14)	load constant int 0 onto tos
STO	0	2	(15)	total := 0;
RDI	0	0	(16)	start of loop - read number
LDV	0	0	(17)	load number onto tos
LCI	0	0	(18)	load constant int 0 onto tos
OPR	0	10	(19)	is number = 0?
JIF	0	22	(20)	if false on tos stay in loop, otherwise
JMP	0	26	(21)	jump out of loop
MST	0	0	(22)	mark the stack - level dif to decl of proc newNumber is 0
LDV	0	0	(23)	load number onto tos as an in parameter for newNumber
CAL	1	3	(24)	call newNumber: 1 parameter; starts at instruction 3
JMP	0	16	(25)	end loop
LDV	0	1	(26)	load count onto tos
OPR	0	20	(27)	write count
OPR	0	21	(28)	newline
LDV	0	2	(29)	load total onto tos
OPR	0	20	(30)	write total
OPR	0	21	(31)	newline
LDV	0	1	(32)	load count onto tos
LCI	0	0	(33)	load constant int 0 onto tos
OPR	0	10	(34)	is count = 0?
JIF	0	37	(35)	if false on tos calculate average
JMP	0	44 	(36)	else jump to end
LDV	0	2	(37)	load total onto tos
LDV	0	1	(38)	load count onto tos
OPR	0	6	(39)	total/count
STO	0	3	(40)	average := total/count
LDV	0	3	(41)	load average onto tos
OPR	0	20	(42)	write average
OPR	0	22	(43)	newline
JMP	0	0	(44)	halt
